name: Build Frontend and Deploy

on:
  push:
    branches: ["main"]

env:
  PROJECT_LOCATION: ./API/API.csproj
  ELASTIC_BEANSTALK_NAME: bao-nguyen-eb-test
  ELASTIC_BEANSTALK_ENV_NAME: Bao-nguyen-eb-test-env

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

        # Install frontend dependencies and build
      - name: Use Node.js ${{ matrix.node-version }}
        working-directory: ./Clients
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        working-directory: ./Clients
        run: npm ci

      - name: Build frontend
        working-directory: ./Clients
        run: npm run build

      # Set up .NET environment
      - name: Set up  .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      # Restore .NET dependencies
      - name: Restore .NET dependencies
        run: dotnet restore $PROJECT_LOCATION # Adjust path to your .NET project

        # Increment version number
      - name: Increment version number
        id: version
        run: |
          VERSION_FILE=version.txt
          VERSION=$(cat $VERSION_FILE)
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          VERSION_PARTS[2]=$((VERSION_PARTS[2]+1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          echo $NEW_VERSION > $VERSION_FILE
          echo "::set-output name=version::$NEW_VERSION"

      # Commit the new version number
      - name: Commit updated version number
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add version.txt
          git commit -m "Increment version to ${{ steps.version.outputs.version }}"
          git push

      # Build .NET application
      - name: Build .NET application
        run: dotnet build --no-restore $PROJECT_LOCATION
      # Publish .NET application
      - name: Publish .NET application
        run: |
          dotnet publish $PROJECT_LOCATION -c Release --output "${{ github.workspace }}/${{ github.run_id }}"
          cd ${{github.run_id}}
          zip -r ../${{github.run_id}}.zip .

      #Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4.3.3
        with:
          name: deploy-files
          path: ${{github.run_id}}.zip

  Deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-north-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy
        run: |
          aws s3 cp "deploy-files/${{github.run_id}}.zip" s3://elasticbeanstalk-eu-north-1-${{ secrets.AWS_ACCOUNT_ID }}/artifact/euro-jackpot-app/

          aws elasticbeanstalk create-application-version --application-name $ELASTIC_BEANSTALK_NAME --version-label ${{github.run_id}} --description ${{github.run_id}} --source-bundle S3Bucket="elasticbeanstalk-eu-north-1-${{ secrets.AWS_ACCOUNT_ID }}",S3Key="artifact/euro-jackpot-app/${{github.run_id}}.zip"

          aws elasticbeanstalk update-environment --application-name $ELASTIC_BEANSTALK_NAME --environment-name $ELASTIC_BEANSTALK_ENV_NAME --version-label ${{github.run_id}}

          aws elasticbeanstalk wait environment-updated --application-name $ELASTIC_BEANSTALK_NAME --environment-name $ELASTIC_BEANSTALK_ENV_NAME
